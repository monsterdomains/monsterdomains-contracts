{
  "address": "0x0124dB1123E80c662Db1211C05FA1396b0b26C89",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract MID",
          "name": "ensAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "mid",
      "outputs": [
        {
          "internalType": "contract MID",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb655fcc5feb0e71f1251064b4a3e8b0134442857667cd174a49970838a59b7ac",
  "receipt": {
    "to": null,
    "from": "0xC04F124220694a2994b8C47D7adC43419B036293",
    "contractAddress": "0x0124dB1123E80c662Db1211C05FA1396b0b26C89",
    "transactionIndex": 76,
    "gasUsed": "532884",
    "logsBloom": "0x
    "blockHash": "0xd9cca788084a48dca878a32b98cae43b8e1b6871fa42b467630636cfebc86f1f",
    "transactionHash": "0xb655fcc5feb0e71f1251064b4a3e8b0134442857667cd174a49970838a59b7ac",
    "logs": [],
    "blockNumber": 25540872,
    "cumulativeGasUsed": "9789389",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA1450009bFfc5CcF1e25f6b0e902543407492886"
  ],
  "numDeployments": 1,
  "solcInputHash": "e90400b39657e40d2d1255b8eeb7f136",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract MID\",\"name\":\"ensAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"mid\",\"outputs\":[{\"internalType\":\"contract MID\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides a default implementation of a resolver for reverse records, which permits only the owner to update it.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor\",\"params\":{\"ensAddr\":\"The address of the MID registry.\"}},\"setName(bytes32,string)\":{\"details\":\"Sets the name for a node.\",\"params\":{\"_name\":\"The name to set.\",\"node\":\"The node to update.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/DefaultReverseResolver.sol\":\"DefaultReverseResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/registry/MID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface MID {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner_);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner_);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver_);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl_);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner_, address resolver_, uint64 ttl_) external;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner_, address resolver_, uint64 ttl_) external;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner_) external returns(bytes32);\\n    function setResolver(bytes32 node, address resolver_) external;\\n    function setOwner(bytes32 node, address owner_) external;\\n    function setTTL(bytes32 node, uint64 ttl_) external;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function owner(bytes32 node) external view returns (address);\\n    function resolver(bytes32 node) external view returns (address);\\n    function ttl(bytes32 node) external view returns (uint64);\\n    function recordExists(bytes32 node) external view returns (bool);\\n    function isApprovedForAll(address owner_, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4d65afeff578bd86691b8e99cf17138effdb3cd0e74a08fecbbeeeae604fb2f7\",\"license\":\"MIT\"},\"contracts/registry/ReverseRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./MID.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\ncontract ReverseRegistrar {\\n    // namehash('addr.reverse')\\n    bytes32 public constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    MID public mid;\\n    NameResolver public defaultResolver;\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the MID registry.\\n     * @param resolverAddr The address of the default reverse resolver.\\n     */\\n    constructor(MID ensAddr, NameResolver resolverAddr) {\\n        mid = ensAddr;\\n        defaultResolver = resolverAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(mid.owner(ADDR_REVERSE_NODE));\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse MID record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in MID.\\n     * @return The MID node hash of the reverse record.\\n     */\\n    function claim(address owner) public returns (bytes32) {\\n        return claimWithResolver(owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse MID record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in MID.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The MID node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver) public returns (bytes32) {\\n        bytes32 label = sha3HexAddress(msg.sender);\\n        bytes32 node_ = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\\n        address currentOwner = mid.owner(node_);\\n\\n        // Update the resolver if required\\n        if (resolver != address(0x0) && resolver != mid.resolver(node_)) {\\n            // Transfer the name to us first if it's not already\\n            if (currentOwner != address(this)) {\\n                mid.setSubnodeOwner(ADDR_REVERSE_NODE, label, address(this));\\n                currentOwner = address(this);\\n            }\\n            mid.setResolver(node_, resolver);\\n        }\\n\\n        // Update the owner if required\\n        if (currentOwner != owner) {\\n            mid.setSubnodeOwner(ADDR_REVERSE_NODE, label, owner);\\n        }\\n\\n        return node_;\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse MID record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The MID node hash of the reverse record.\\n     */\\n    function setName(string memory name) public returns (bytes32) {\\n        bytes32 node_ = claimWithResolver(address(this), address(defaultResolver));\\n        defaultResolver.setName(node_, name);\\n        return node_;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The MID node hash.\\n     */\\n    function node(address addr) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        addr;\\n        ret; // Stop warning us about unused variables\\n        assembly {\\n            let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\\n\\n            for { let i := 40 } gt(i, 0) { } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbe113a14b35e18c76f52a2a642431026d9ab626b8ca9197424bb1f0f952910c6\",\"license\":\"MIT\"},\"contracts/resolvers/DefaultReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../registry/MID.sol\\\";\\nimport \\\"../registry/ReverseRegistrar.sol\\\";\\n\\n/**\\n * @dev Provides a default implementation of a resolver for reverse records,\\n * which permits only the owner to update it.\\n */\\ncontract DefaultReverseResolver {\\n    // namehash('addr.reverse')\\n    bytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    MID public mid;\\n    mapping (bytes32 => string) public name;\\n\\n    /**\\n     * @dev Only permits calls by the reverse registrar.\\n     * @param node The node permission is required for.\\n     */\\n    modifier onlyOwner(bytes32 node) {\\n        require(msg.sender == mid.owner(node), \\\"not owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the MID registry.\\n     */\\n    constructor(MID ensAddr) {\\n        mid = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar registrar = ReverseRegistrar(mid.owner(ADDR_REVERSE_NODE));\\n        if (address(registrar) != address(0x0)) {\\n            registrar.claim(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the name for a node.\\n     * @param node The node to update.\\n     * @param _name The name to set.\\n     */\\n    function setName(bytes32 node, string memory _name) public onlyOwner(node) {\\n        name[node] = _name;\\n    }\\n}\\n\",\"keccak256\":\"0x1a57e9f68a17f4b07b45a865f585635eb9cc4b07817f2f049df22f466bcdaf7d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000beb38038062000beb8339818101604052810190620000379190620002bb565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be37f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b6040518263ffffffff1660e01b8152600401620000f8919062000326565b60206040518083038186803b1580156200011157600080fd5b505afa15801562000126573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014c919062000263565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000216578073ffffffffffffffffffffffffffffffffffffffff16631e83409a336040518263ffffffff1660e01b8152600401620001be919062000309565b602060405180830381600087803b158015620001d957600080fd5b505af1158015620001ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021491906200028f565b505b5050620003e3565b6000815190506200022f8162000395565b92915050565b6000815190506200024681620003af565b92915050565b6000815190506200025d81620003c9565b92915050565b6000602082840312156200027657600080fd5b600062000286848285016200021e565b91505092915050565b600060208284031215620002a257600080fd5b6000620002b28482850162000235565b91505092915050565b600060208284031215620002ce57600080fd5b6000620002de848285016200024c565b91505092915050565b620002f28162000343565b82525050565b620003038162000357565b82525050565b6000602082019050620003206000830184620002e7565b92915050565b60006020820190506200033d6000830184620002f8565b92915050565b6000620003508262000375565b9050919050565b6000819050919050565b60006200036e8262000343565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620003a08162000343565b8114620003ac57600080fd5b50565b620003ba8162000357565b8114620003c657600080fd5b50565b620003d48162000361565b8114620003e057600080fd5b50565b6107f880620003f36000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632e94420f14610046578063691f3431146100645780637737221314610094575b600080fd5b61004e6100b0565b60405161005b9190610528565b60405180910390f35b61007e60048036038101906100799190610416565b6100d4565b60405161008b9190610543565b60405180910390f35b6100ae60048036038101906100a9919061043f565b610174565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160205280600052604060002060009150905080546100f390610699565b80601f016020809104026020016040519081016040528092919081815260200182805461011f90610699565b801561016c5780601f106101415761010080835404028352916020019161016c565b820191906000526020600020905b81548152906001019060200180831161014f57829003601f168201915b505050505081565b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3826040518263ffffffff1660e01b81526004016101ce919061050d565b60206040518083038186803b1580156101e657600080fd5b505afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e91906103ed565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461028b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290610565565b60405180910390fd5b816001600085815260200190815260200160002090805190602001906102b29291906102b8565b50505050565b8280546102c490610699565b90600052602060002090601f0160209004810192826102e6576000855561032d565b82601f106102ff57805160ff191683800117855561032d565b8280016001018555821561032d579182015b8281111561032c578251825591602001919060010190610311565b5b50905061033a919061033e565b5090565b5b8082111561035757600081600090555060010161033f565b5090565b600061036e610369846105aa565b610585565b90508281526020810184848401111561038657600080fd5b610391848285610657565b509392505050565b6000815190506103a881610794565b92915050565b6000813590506103bd816107ab565b92915050565b600082601f8301126103d457600080fd5b81356103e484826020860161035b565b91505092915050565b6000602082840312156103ff57600080fd5b600061040d84828501610399565b91505092915050565b60006020828403121561042857600080fd5b6000610436848285016103ae565b91505092915050565b6000806040838503121561045257600080fd5b6000610460858286016103ae565b925050602083013567ffffffffffffffff81111561047d57600080fd5b610489858286016103c3565b9150509250929050565b61049c81610609565b82525050565b6104ab81610633565b82525050565b60006104bc826105db565b6104c681856105e6565b93506104d6818560208601610666565b6104df8161075a565b840191505092915050565b60006104f76009836105e6565b91506105028261076b565b602082019050919050565b60006020820190506105226000830184610493565b92915050565b600060208201905061053d60008301846104a2565b92915050565b6000602082019050818103600083015261055d81846104b1565b905092915050565b6000602082019050818103600083015261057e816104ea565b9050919050565b600061058f6105a0565b905061059b82826106cb565b919050565b6000604051905090565b600067ffffffffffffffff8211156105c5576105c461072b565b5b6105ce8261075a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061060282610613565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061063e82610645565b9050919050565b600061065082610613565b9050919050565b82818337600083830152505050565b60005b83811015610684578082015181840152602081019050610669565b83811115610693576000848401525b50505050565b600060028204905060018216806106b157607f821691505b602082108114156106c5576106c46106fc565b5b50919050565b6106d48261075a565b810181811067ffffffffffffffff821117156106f3576106f261072b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b61079d816105f7565b81146107a857600080fd5b50565b6107b481610609565b81146107bf57600080fd5b5056fea2646970667358221220b40206e055069c450d72be361300f7623aa5b8a499432e8d58c9dd7dcfc14fe564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632e94420f14610046578063691f3431146100645780637737221314610094575b600080fd5b61004e6100b0565b60405161005b9190610528565b60405180910390f35b61007e60048036038101906100799190610416565b6100d4565b60405161008b9190610543565b60405180910390f35b6100ae60048036038101906100a9919061043f565b610174565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160205280600052604060002060009150905080546100f390610699565b80601f016020809104026020016040519081016040528092919081815260200182805461011f90610699565b801561016c5780601f106101415761010080835404028352916020019161016c565b820191906000526020600020905b81548152906001019060200180831161014f57829003601f168201915b505050505081565b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3826040518263ffffffff1660e01b81526004016101ce919061050d565b60206040518083038186803b1580156101e657600080fd5b505afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e91906103ed565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461028b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290610565565b60405180910390fd5b816001600085815260200190815260200160002090805190602001906102b29291906102b8565b50505050565b8280546102c490610699565b90600052602060002090601f0160209004810192826102e6576000855561032d565b82601f106102ff57805160ff191683800117855561032d565b8280016001018555821561032d579182015b8281111561032c578251825591602001919060010190610311565b5b50905061033a919061033e565b5090565b5b8082111561035757600081600090555060010161033f565b5090565b600061036e610369846105aa565b610585565b90508281526020810184848401111561038657600080fd5b610391848285610657565b509392505050565b6000815190506103a881610794565b92915050565b6000813590506103bd816107ab565b92915050565b600082601f8301126103d457600080fd5b81356103e484826020860161035b565b91505092915050565b6000602082840312156103ff57600080fd5b600061040d84828501610399565b91505092915050565b60006020828403121561042857600080fd5b6000610436848285016103ae565b91505092915050565b6000806040838503121561045257600080fd5b6000610460858286016103ae565b925050602083013567ffffffffffffffff81111561047d57600080fd5b610489858286016103c3565b9150509250929050565b61049c81610609565b82525050565b6104ab81610633565b82525050565b60006104bc826105db565b6104c681856105e6565b93506104d6818560208601610666565b6104df8161075a565b840191505092915050565b60006104f76009836105e6565b91506105028261076b565b602082019050919050565b60006020820190506105226000830184610493565b92915050565b600060208201905061053d60008301846104a2565b92915050565b6000602082019050818103600083015261055d81846104b1565b905092915050565b6000602082019050818103600083015261057e816104ea565b9050919050565b600061058f6105a0565b905061059b82826106cb565b919050565b6000604051905090565b600067ffffffffffffffff8211156105c5576105c461072b565b5b6105ce8261075a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061060282610613565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061063e82610645565b9050919050565b600061065082610613565b9050919050565b82818337600083830152505050565b60005b83811015610684578082015181840152602081019050610669565b83811115610693576000848401525b50505050565b600060028204905060018216806106b157607f821691505b602082108114156106c5576106c46106fc565b5b50919050565b6106d48261075a565b810181811067ffffffffffffffff821117156106f3576106f261072b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b61079d816105f7565b81146107a857600080fd5b50565b6107b481610609565b81146107bf57600080fd5b5056fea2646970667358221220b40206e055069c450d72be361300f7623aa5b8a499432e8d58c9dd7dcfc14fe564736f6c63430008040033",
  "devdoc": {
    "details": "Provides a default implementation of a resolver for reverse records, which permits only the owner to update it.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor",
        "params": {
          "ensAddr": "The address of the MID registry."
        }
      },
      "setName(bytes32,string)": {
        "details": "Sets the name for a node.",
        "params": {
          "_name": "The name to set.",
          "node": "The node to update."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7882,
        "contract": "contracts/resolvers/DefaultReverseResolver.sol:DefaultReverseResolver",
        "label": "mid",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(MID)7129"
      },
      {
        "astId": 7886,
        "contract": "contracts/resolvers/DefaultReverseResolver.sol:DefaultReverseResolver",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(MID)7129": {
        "encoding": "inplace",
        "label": "contract MID",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}