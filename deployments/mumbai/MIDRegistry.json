{
  "address": "0xab4914C910533b03F32B7BbCfA56D2B2412949ee",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "NewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resolver_",
          "type": "address"
        }
      ],
      "name": "NewResolver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ttl_",
          "type": "uint64"
        }
      ],
      "name": "NewTTL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "recordExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver_",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "ttl_",
          "type": "uint64"
        }
      ],
      "name": "setRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "resolver_",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setSubnodeOwner",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver_",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "ttl_",
          "type": "uint64"
        }
      ],
      "name": "setSubnodeRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "ttl_",
          "type": "uint64"
        }
      ],
      "name": "setTTL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "ttl",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1983d2ad494b169bc42a764df07d58a5f226bad999b9f228392005f255e1ec3c",
  "receipt": {
    "to": null,
    "from": "0xC04F124220694a2994b8C47D7adC43419B036293",
    "contractAddress": "0xab4914C910533b03F32B7BbCfA56D2B2412949ee",
    "transactionIndex": 5,
    "gasUsed": "1148582",
    "logsBloom": "0x
    "blockHash": "0xf10e83dd9c827debd43a181d5744392ea86c13d1a5266d201beba8a105fb834a",
    "transactionHash": "0x1983d2ad494b169bc42a764df07d58a5f226bad999b9f228392005f255e1ec3c",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 30775404,
        "transactionHash": "0x1983d2ad494b169bc42a764df07d58a5f226bad999b9f228392005f255e1ec3c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c04f124220694a2994b8c47d7adc43419b036293",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000061ef1a1287a000000000000000000000000000000000000000000000000000bc2ba9d79487ad8000000000000000000000000000000000000000000000c2890b017daa2b67d060000000000000000000000000000000000000000000000000bbc9babd82000d8000000000000000000000000000000000000000000000c2890b636cc43def706",
        "logIndex": 10,
        "blockHash": "0xf10e83dd9c827debd43a181d5744392ea86c13d1a5266d201beba8a105fb834a"
      }
    ],
    "blockNumber": 30775404,
    "cumulativeGasUsed": "1326993",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "943e11a3162ca2461d3e9210661e5eaf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver_\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ttl_\",\"type\":\"uint64\"}],\"name\":\"NewTTL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"recordExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl_\",\"type\":\"uint64\"}],\"name\":\"setRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver_\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl_\",\"type\":\"uint64\"}],\"name\":\"setSubnodeRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl_\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ttl\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructs a new MID registrar.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Query if an address is an authorized operator for another address.\",\"params\":{\"operator\":\"The address that acts on behalf of the owner.\",\"owner_\":\"The address that owns the records.\"},\"returns\":{\"_0\":\"True if `operator` is an approved operator for `owner`, false otherwise.\"}},\"owner(bytes32)\":{\"details\":\"Returns the address that owns the specified node.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"address of the owner.\"}},\"recordExists(bytes32)\":{\"details\":\"Returns whether a record has been imported to the registry.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"Bool if record exists\"}},\"resolver(bytes32)\":{\"details\":\"Returns the address of the resolver for the specified node.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"address of the resolver.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage  all of `msg.sender`'s MID records. Emits the ApprovalForAll event.\",\"params\":{\"approved\":\"True if the operator is approved, false to revoke approval.\",\"operator\":\"Address to add to the set of authorized operators.\"}},\"setOwner(bytes32,address)\":{\"details\":\"Transfers ownership of a node to a new address. May only be called by the current owner of the node.\",\"params\":{\"node\":\"The node to transfer ownership of.\",\"owner_\":\"The address of the new owner.\"}},\"setRecord(bytes32,address,address,uint64)\":{\"details\":\"Sets the record for a node.\",\"params\":{\"node\":\"The node to update.\",\"owner_\":\"The address of the new owner.\",\"resolver_\":\"The address of the resolver.\",\"ttl_\":\"The TTL in seconds.\"}},\"setResolver(bytes32,address)\":{\"details\":\"Sets the resolver address for the specified node.\",\"params\":{\"node\":\"The node to update.\",\"resolver_\":\"The address of the resolver.\"}},\"setSubnodeOwner(bytes32,bytes32,address)\":{\"details\":\"Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\",\"params\":{\"label\":\"The hash of the label specifying the subnode.\",\"node\":\"The parent node.\",\"owner_\":\"The address of the new owner.\"}},\"setSubnodeRecord(bytes32,bytes32,address,address,uint64)\":{\"details\":\"Sets the record for a subnode.\",\"params\":{\"label\":\"The hash of the label specifying the subnode.\",\"node\":\"The parent node.\",\"owner_\":\"The address of the new owner.\",\"resolver_\":\"The address of the resolver.\",\"ttl_\":\"The TTL in seconds.\"}},\"setTTL(bytes32,uint64)\":{\"details\":\"Sets the TTL for the specified node.\",\"params\":{\"node\":\"The node to update.\",\"ttl_\":\"The TTL in seconds.\"}},\"ttl(bytes32)\":{\"details\":\"Returns the TTL of a node, and any records associated with it.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"ttl of the node.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The MID registry contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/MIDRegistry.sol\":\"MIDRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/registry/MID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface MID {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner_);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner_);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver_);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl_);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner_, address resolver_, uint64 ttl_) external;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner_, address resolver_, uint64 ttl_) external;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner_) external returns(bytes32);\\n    function setResolver(bytes32 node, address resolver_) external;\\n    function setOwner(bytes32 node, address owner_) external;\\n    function setTTL(bytes32 node, uint64 ttl_) external;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function owner(bytes32 node) external view returns (address);\\n    function resolver(bytes32 node) external view returns (address);\\n    function ttl(bytes32 node) external view returns (uint64);\\n    function recordExists(bytes32 node) external view returns (bool);\\n    function isApprovedForAll(address owner_, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4d65afeff578bd86691b8e99cf17138effdb3cd0e74a08fecbbeeeae604fb2f7\",\"license\":\"MIT\"},\"contracts/registry/MIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./MID.sol\\\";\\n\\n/**\\n * The MID registry contract.\\n */\\ncontract MIDRegistry is MID {\\n\\n    struct Record {\\n        address owner;\\n        address resolver;\\n        uint64 ttl;\\n    }\\n\\n    mapping (bytes32 => Record) records;\\n    mapping (address => mapping(address => bool)) operators;\\n\\n    // Permits modifications only by the owner of the specified node.\\n    modifier authorised(bytes32 node) {\\n        address owner_ = records[node].owner;\\n        require(owner_ == msg.sender || operators[owner_][msg.sender], \\\"not authorised\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructs a new MID registrar.\\n     */\\n    constructor() {\\n        records[0x0].owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Sets the record for a node.\\n     * @param node The node to update.\\n     * @param owner_ The address of the new owner.\\n     * @param resolver_ The address of the resolver.\\n     * @param ttl_ The TTL in seconds.\\n     */\\n    function setRecord(bytes32 node, address owner_, address resolver_, uint64 ttl_) external virtual override {\\n        setOwner(node, owner_);\\n        _setResolverAndTTL(node, resolver_, ttl_);\\n    }\\n\\n    /**\\n     * @dev Sets the record for a subnode.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner_ The address of the new owner.\\n     * @param resolver_ The address of the resolver.\\n     * @param ttl_ The TTL in seconds.\\n     */\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner_, address resolver_, uint64 ttl_) external virtual override {\\n        bytes32 subnode = setSubnodeOwner(node, label, owner_);\\n        _setResolverAndTTL(subnode, resolver_, ttl_);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\\n     * @param node The node to transfer ownership of.\\n     * @param owner_ The address of the new owner.\\n     */\\n    function setOwner(bytes32 node, address owner_) public virtual override authorised(node) {\\n        _setOwner(node, owner_);\\n        emit Transfer(node, owner_);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner_ The address of the new owner.\\n     */\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner_) public virtual override authorised(node) returns(bytes32) {\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\n        _setOwner(subnode, owner_);\\n        emit NewOwner(node, label, owner_);\\n        return subnode;\\n    }\\n\\n    /**\\n     * @dev Sets the resolver address for the specified node.\\n     * @param node The node to update.\\n     * @param resolver_ The address of the resolver.\\n     */\\n    function setResolver(bytes32 node, address resolver_) public virtual override authorised(node) {\\n        emit NewResolver(node, resolver_);\\n        records[node].resolver = resolver_;\\n    }\\n\\n    /**\\n     * @dev Sets the TTL for the specified node.\\n     * @param node The node to update.\\n     * @param ttl_ The TTL in seconds.\\n     */\\n    function setTTL(bytes32 node, uint64 ttl_) public virtual override authorised(node) {\\n        emit NewTTL(node, ttl_);\\n        records[node].ttl = ttl_;\\n    }\\n\\n    /**\\n     * @dev Enable or disable approval for a third party (\\\"operator\\\") to manage\\n     *  all of `msg.sender`'s MID records. Emits the ApprovalForAll event.\\n     * @param operator Address to add to the set of authorized operators.\\n     * @param approved True if the operator is approved, false to revoke approval.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        operators[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns the address that owns the specified node.\\n     * @param node The specified node.\\n     * @return address of the owner.\\n     */\\n    function owner(bytes32 node) public virtual override view returns (address) {\\n        address addr = records[node].owner;\\n        if (addr == address(this)) {\\n            return address(0x0);\\n        }\\n\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the resolver for the specified node.\\n     * @param node The specified node.\\n     * @return address of the resolver.\\n     */\\n    function resolver(bytes32 node) public virtual override view returns (address) {\\n        return records[node].resolver;\\n    }\\n\\n    /**\\n     * @dev Returns the TTL of a node, and any records associated with it.\\n     * @param node The specified node.\\n     * @return ttl of the node.\\n     */\\n    function ttl(bytes32 node) public virtual override view returns (uint64) {\\n        return records[node].ttl;\\n    }\\n\\n    /**\\n     * @dev Returns whether a record has been imported to the registry.\\n     * @param node The specified node.\\n     * @return Bool if record exists\\n     */\\n    function recordExists(bytes32 node) public virtual override view returns (bool) {\\n        return records[node].owner != address(0x0);\\n    }\\n\\n    /**\\n     * @dev Query if an address is an authorized operator for another address.\\n     * @param owner_ The address that owns the records.\\n     * @param operator The address that acts on behalf of the owner.\\n     * @return True if `operator` is an approved operator for `owner`, false otherwise.\\n     */\\n    function isApprovedForAll(address owner_, address operator) external virtual override view returns (bool) {\\n        return operators[owner_][operator];\\n    }\\n\\n    function _setOwner(bytes32 node, address owner_) internal virtual {\\n        records[node].owner = owner_;\\n    }\\n\\n    function _setResolverAndTTL(bytes32 node, address resolver_, uint64 ttl_) internal {\\n        if(resolver_ != records[node].resolver) {\\n            records[node].resolver = resolver_;\\n            emit NewResolver(node, resolver_);\\n        }\\n\\n        if(ttl_ != records[node].ttl) {\\n            records[node].ttl = ttl_;\\n            emit NewTTL(node, ttl_);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x16de15aa790a71d9588372c44bb6bfc6210e028f301ccfbba298d8c998fc7b43\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000808060001b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061136e806100776000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80635b0fc9c3116100715780635b0fc9c3146101b15780635ef2c7f0146101cd578063a22cb465146101e9578063cf40882314610205578063e985e9c514610221578063f79fe53814610251576100b4565b80630178b8bf146100b957806302571be3146100e957806306ab59231461011957806314ab90381461014957806316a25cbd146101655780631896f70a14610195575b600080fd5b6100d360048036038101906100ce9190610f44565b610281565b6040516100e091906111b0565b60405180910390f35b61010360048036038101906100fe9190610f44565b6102c0565b60405161011091906111b0565b60405180910390f35b610133600480360381019061012e919061100c565b610343565b60405161014091906111e6565b60405180910390f35b610163600480360381019061015e91906110d2565b6104fc565b005b61017f600480360381019061017a9190610f44565b6106b0565b60405161018c9190611221565b60405180910390f35b6101af60048036038101906101aa9190610f6d565b6106e3565b005b6101cb60048036038101906101c69190610f6d565b6108af565b005b6101e760048036038101906101e2919061105b565b610a31565b005b61020360048036038101906101fe9190610f08565b610a53565b005b61021f600480360381019061021a9190610fa9565b610b50565b005b61023b60048036038101906102369190610ecc565b610b6b565b60405161024891906111cb565b60405180910390f35b61026b60048036038101906102669190610f44565b610bff565b60405161027891906111cb565b60405180910390f35b600080600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561033957600091505061033e565b809150505b919050565b600083600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806104405750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61047f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047690611201565b60405180910390fd5b60008686604051602001610494929190611184565b6040516020818303038152906040528051906020012090506104b68186610c6d565b85877fce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82876040516104e791906111b0565b60405180910390a38093505050509392505050565b81600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806105f75750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d90611201565b60405180910390fd5b837f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa68846040516106669190611221565b60405180910390a28260008086815260200190815260200160002060010160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050565b600080600083815260200190815260200160002060010160149054906101000a900467ffffffffffffffff169050919050565b81600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806107de5750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081490611201565b60405180910390fd5b837f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a08460405161084d91906111b0565b60405180910390a28260008086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b81600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806109aa5750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6109e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e090611201565b60405180910390fd5b6109f38484610c6d565b837fd4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d26684604051610a2391906111b0565b60405180910390a250505050565b6000610a3e868686610343565b9050610a4b818484610cc5565b505050505050565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610b4491906111cb565b60405180910390a35050565b610b5a84846108af565b610b65848383610cc5565b50505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b8060008084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610dba578160008085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a083604051610db191906111b0565b60405180910390a25b60008084815260200190815260200160002060010160149054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1614610e73578060008085815260200190815260200160002060010160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550827f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa6882604051610e6a9190611221565b60405180910390a25b505050565b600081359050610e87816112dc565b92915050565b600081359050610e9c816112f3565b92915050565b600081359050610eb18161130a565b92915050565b600081359050610ec681611321565b92915050565b60008060408385031215610edf57600080fd5b6000610eed85828601610e78565b9250506020610efe85828601610e78565b9150509250929050565b60008060408385031215610f1b57600080fd5b6000610f2985828601610e78565b9250506020610f3a85828601610e8d565b9150509250929050565b600060208284031215610f5657600080fd5b6000610f6484828501610ea2565b91505092915050565b60008060408385031215610f8057600080fd5b6000610f8e85828601610ea2565b9250506020610f9f85828601610e78565b9150509250929050565b60008060008060808587031215610fbf57600080fd5b6000610fcd87828801610ea2565b9450506020610fde87828801610e78565b9350506040610fef87828801610e78565b925050606061100087828801610eb7565b91505092959194509250565b60008060006060848603121561102157600080fd5b600061102f86828701610ea2565b935050602061104086828701610ea2565b925050604061105186828701610e78565b9150509250925092565b600080600080600060a0868803121561107357600080fd5b600061108188828901610ea2565b955050602061109288828901610ea2565b94505060406110a388828901610e78565b93505060606110b488828901610e78565b92505060806110c588828901610eb7565b9150509295509295909350565b600080604083850312156110e557600080fd5b60006110f385828601610ea2565b925050602061110485828601610eb7565b9150509250929050565b6111178161124d565b82525050565b6111268161125f565b82525050565b6111358161126b565b82525050565b61114c6111478261126b565b6112a9565b82525050565b600061115f600e8361123c565b915061116a826112b3565b602082019050919050565b61117e81611295565b82525050565b6000611190828561113b565b6020820191506111a0828461113b565b6020820191508190509392505050565b60006020820190506111c5600083018461110e565b92915050565b60006020820190506111e0600083018461111d565b92915050565b60006020820190506111fb600083018461112c565b92915050565b6000602082019050818103600083015261121a81611152565b9050919050565b60006020820190506112366000830184611175565b92915050565b600082825260208201905092915050565b600061125882611275565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b7f6e6f7420617574686f7269736564000000000000000000000000000000000000600082015250565b6112e58161124d565b81146112f057600080fd5b50565b6112fc8161125f565b811461130757600080fd5b50565b6113138161126b565b811461131e57600080fd5b50565b61132a81611295565b811461133557600080fd5b5056fea2646970667358221220f6f25cd43022c5d0b772001b8b913e9f7a54d858c47774814d43c571e963bb7d64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80635b0fc9c3116100715780635b0fc9c3146101b15780635ef2c7f0146101cd578063a22cb465146101e9578063cf40882314610205578063e985e9c514610221578063f79fe53814610251576100b4565b80630178b8bf146100b957806302571be3146100e957806306ab59231461011957806314ab90381461014957806316a25cbd146101655780631896f70a14610195575b600080fd5b6100d360048036038101906100ce9190610f44565b610281565b6040516100e091906111b0565b60405180910390f35b61010360048036038101906100fe9190610f44565b6102c0565b60405161011091906111b0565b60405180910390f35b610133600480360381019061012e919061100c565b610343565b60405161014091906111e6565b60405180910390f35b610163600480360381019061015e91906110d2565b6104fc565b005b61017f600480360381019061017a9190610f44565b6106b0565b60405161018c9190611221565b60405180910390f35b6101af60048036038101906101aa9190610f6d565b6106e3565b005b6101cb60048036038101906101c69190610f6d565b6108af565b005b6101e760048036038101906101e2919061105b565b610a31565b005b61020360048036038101906101fe9190610f08565b610a53565b005b61021f600480360381019061021a9190610fa9565b610b50565b005b61023b60048036038101906102369190610ecc565b610b6b565b60405161024891906111cb565b60405180910390f35b61026b60048036038101906102669190610f44565b610bff565b60405161027891906111cb565b60405180910390f35b600080600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561033957600091505061033e565b809150505b919050565b600083600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806104405750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61047f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047690611201565b60405180910390fd5b60008686604051602001610494929190611184565b6040516020818303038152906040528051906020012090506104b68186610c6d565b85877fce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82876040516104e791906111b0565b60405180910390a38093505050509392505050565b81600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806105f75750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d90611201565b60405180910390fd5b837f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa68846040516106669190611221565b60405180910390a28260008086815260200190815260200160002060010160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050565b600080600083815260200190815260200160002060010160149054906101000a900467ffffffffffffffff169050919050565b81600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806107de5750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081490611201565b60405180910390fd5b837f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a08460405161084d91906111b0565b60405180910390a28260008086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b81600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806109aa5750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6109e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e090611201565b60405180910390fd5b6109f38484610c6d565b837fd4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d26684604051610a2391906111b0565b60405180910390a250505050565b6000610a3e868686610343565b9050610a4b818484610cc5565b505050505050565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610b4491906111cb565b60405180910390a35050565b610b5a84846108af565b610b65848383610cc5565b50505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b8060008084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610dba578160008085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a083604051610db191906111b0565b60405180910390a25b60008084815260200190815260200160002060010160149054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1614610e73578060008085815260200190815260200160002060010160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550827f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa6882604051610e6a9190611221565b60405180910390a25b505050565b600081359050610e87816112dc565b92915050565b600081359050610e9c816112f3565b92915050565b600081359050610eb18161130a565b92915050565b600081359050610ec681611321565b92915050565b60008060408385031215610edf57600080fd5b6000610eed85828601610e78565b9250506020610efe85828601610e78565b9150509250929050565b60008060408385031215610f1b57600080fd5b6000610f2985828601610e78565b9250506020610f3a85828601610e8d565b9150509250929050565b600060208284031215610f5657600080fd5b6000610f6484828501610ea2565b91505092915050565b60008060408385031215610f8057600080fd5b6000610f8e85828601610ea2565b9250506020610f9f85828601610e78565b9150509250929050565b60008060008060808587031215610fbf57600080fd5b6000610fcd87828801610ea2565b9450506020610fde87828801610e78565b9350506040610fef87828801610e78565b925050606061100087828801610eb7565b91505092959194509250565b60008060006060848603121561102157600080fd5b600061102f86828701610ea2565b935050602061104086828701610ea2565b925050604061105186828701610e78565b9150509250925092565b600080600080600060a0868803121561107357600080fd5b600061108188828901610ea2565b955050602061109288828901610ea2565b94505060406110a388828901610e78565b93505060606110b488828901610e78565b92505060806110c588828901610eb7565b9150509295509295909350565b600080604083850312156110e557600080fd5b60006110f385828601610ea2565b925050602061110485828601610eb7565b9150509250929050565b6111178161124d565b82525050565b6111268161125f565b82525050565b6111358161126b565b82525050565b61114c6111478261126b565b6112a9565b82525050565b600061115f600e8361123c565b915061116a826112b3565b602082019050919050565b61117e81611295565b82525050565b6000611190828561113b565b6020820191506111a0828461113b565b6020820191508190509392505050565b60006020820190506111c5600083018461110e565b92915050565b60006020820190506111e0600083018461111d565b92915050565b60006020820190506111fb600083018461112c565b92915050565b6000602082019050818103600083015261121a81611152565b9050919050565b60006020820190506112366000830184611175565b92915050565b600082825260208201905092915050565b600061125882611275565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b7f6e6f7420617574686f7269736564000000000000000000000000000000000000600082015250565b6112e58161124d565b81146112f057600080fd5b50565b6112fc8161125f565b811461130757600080fd5b50565b6113138161126b565b811461131e57600080fd5b50565b61132a81611295565b811461133557600080fd5b5056fea2646970667358221220f6f25cd43022c5d0b772001b8b913e9f7a54d858c47774814d43c571e963bb7d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructs a new MID registrar."
      },
      "isApprovedForAll(address,address)": {
        "details": "Query if an address is an authorized operator for another address.",
        "params": {
          "operator": "The address that acts on behalf of the owner.",
          "owner_": "The address that owns the records."
        },
        "returns": {
          "_0": "True if `operator` is an approved operator for `owner`, false otherwise."
        }
      },
      "owner(bytes32)": {
        "details": "Returns the address that owns the specified node.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "address of the owner."
        }
      },
      "recordExists(bytes32)": {
        "details": "Returns whether a record has been imported to the registry.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "Bool if record exists"
        }
      },
      "resolver(bytes32)": {
        "details": "Returns the address of the resolver for the specified node.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "address of the resolver."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s MID records. Emits the ApprovalForAll event.",
        "params": {
          "approved": "True if the operator is approved, false to revoke approval.",
          "operator": "Address to add to the set of authorized operators."
        }
      },
      "setOwner(bytes32,address)": {
        "details": "Transfers ownership of a node to a new address. May only be called by the current owner of the node.",
        "params": {
          "node": "The node to transfer ownership of.",
          "owner_": "The address of the new owner."
        }
      },
      "setRecord(bytes32,address,address,uint64)": {
        "details": "Sets the record for a node.",
        "params": {
          "node": "The node to update.",
          "owner_": "The address of the new owner.",
          "resolver_": "The address of the resolver.",
          "ttl_": "The TTL in seconds."
        }
      },
      "setResolver(bytes32,address)": {
        "details": "Sets the resolver address for the specified node.",
        "params": {
          "node": "The node to update.",
          "resolver_": "The address of the resolver."
        }
      },
      "setSubnodeOwner(bytes32,bytes32,address)": {
        "details": "Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.",
        "params": {
          "label": "The hash of the label specifying the subnode.",
          "node": "The parent node.",
          "owner_": "The address of the new owner."
        }
      },
      "setSubnodeRecord(bytes32,bytes32,address,address,uint64)": {
        "details": "Sets the record for a subnode.",
        "params": {
          "label": "The hash of the label specifying the subnode.",
          "node": "The parent node.",
          "owner_": "The address of the new owner.",
          "resolver_": "The address of the resolver.",
          "ttl_": "The TTL in seconds."
        }
      },
      "setTTL(bytes32,uint64)": {
        "details": "Sets the TTL for the specified node.",
        "params": {
          "node": "The node to update.",
          "ttl_": "The TTL in seconds."
        }
      },
      "ttl(bytes32)": {
        "details": "Returns the TTL of a node, and any records associated with it.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "ttl of the node."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The MID registry contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6764,
        "contract": "contracts/registry/MIDRegistry.sol:MIDRegistry",
        "label": "records",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Record)6759_storage)"
      },
      {
        "astId": 6770,
        "contract": "contracts/registry/MIDRegistry.sol:MIDRegistry",
        "label": "operators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Record)6759_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MIDRegistry.Record)",
        "numberOfBytes": "32",
        "value": "t_struct(Record)6759_storage"
      },
      "t_struct(Record)6759_storage": {
        "encoding": "inplace",
        "label": "struct MIDRegistry.Record",
        "members": [
          {
            "astId": 6754,
            "contract": "contracts/registry/MIDRegistry.sol:MIDRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6756,
            "contract": "contracts/registry/MIDRegistry.sol:MIDRegistry",
            "label": "resolver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6758,
            "contract": "contracts/registry/MIDRegistry.sol:MIDRegistry",
            "label": "ttl",
            "offset": 20,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}