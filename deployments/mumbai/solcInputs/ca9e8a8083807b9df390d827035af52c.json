{
  "language": "Solidity",
  "sources": {
    "contracts/cidregistrar/BulkRenewal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"../registry/MID.sol\";\nimport \"./IMIDRegistrarController.sol\";\nimport \"../resolvers/Resolver.sol\";\nimport \"./IBulkRenewal.sol\";\n\ncontract BulkRenewal is IBulkRenewal {\n    // namehash(.bnb)\n    bytes32 constant private MID_NAMEHASH = 0xdba5666821b22671387fe7ea11d7cc41ede85a5aa67c3e7b3d68ce6a661f389c;\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\"supportsInterface(bytes4)\"));\n\n    MID public mid;\n    IMIDRegistrarController controller;\n\n    constructor(MID _mid, IMIDRegistrarController _controller) {\n        require(address(_mid) != address(0) && address(_controller) != address(0), \"invalid address\");\n        mid = _mid;\n        controller = _controller;\n    }\n\n    function rentPrice(string[] calldata names, uint duration) external view override returns(uint total) {\n        for(uint i = 0; i < names.length; i++) {\n            total += controller.rentPrice(names[i], duration);\n        }\n    }\n\n    function rentPrices(string[] calldata names, uint[] calldata durations) external view override returns(uint total) {\n        for(uint i = 0; i < names.length; i++) {\n            total += controller.rentPrice(names[i], durations[i]);\n        }\n    }\n\n    function renewAll(string[] calldata names, uint duration) external payable override {\n        for(uint i = 0; i < names.length; i++) {\n            uint cost = controller.rentPrice(names[i], duration);\n            controller.renew{value:cost}(names[i], duration);\n        }\n        // Send any excess funds back\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    // batch commit & register and helpers\n    function makeBatchCommitmentWithConfig(string[] memory names, address owner, bytes32 secret, address resolver, address addr) view public override returns (bytes32[] memory results) {\n        require(names.length > 0, \"name count 0\");\n        results = new bytes32[](names.length);\n        for (uint i = 0; i < names.length; ++i) {\n            results[i] = controller.makeCommitmentWithConfig(names[i], owner, secret, resolver, addr);\n        }\n    }\n\n    function batchCommit(bytes32[] memory commitments_) public override {\n        require(commitments_.length > 0, \"commitment count 0\");\n        for (uint i = 0; i < commitments_.length; ++i) {\n            controller.commit(commitments_[i]);\n        }\n    }\n\n    function batchRegisterWithConfig(string[] memory names, address owner, uint[] memory durations, bytes32 secret, address resolver, address addr) external payable override {\n        require(names.length > 0, \"name count 0\");\n        require(names.length == durations.length, \"length mismatch\");\n        for (uint i = 0; i < names.length; ++i) {\n            uint cost = controller.rentPrice(names[i], durations[i]);\n            controller.registerWithConfig{value: cost}(names[i], owner, durations[i], secret, resolver, addr);\n        }\n    }\n\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\n         return interfaceID == INTERFACE_META_ID || interfaceID == type(IBulkRenewal).interfaceId;\n    }\n}\n"
    },
    "contracts/cidregistrar/IBulkRenewal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\ninterface IBulkRenewal {\n    function rentPrice(string[] calldata names, uint duration) external view returns(uint total);\n\n    function rentPrices(string[] calldata names, uint[] calldata durations) external view returns(uint total);\n\n    function renewAll(string[] calldata names, uint duration) external payable;\n\n    function makeBatchCommitmentWithConfig(string[] memory names, address owner, bytes32 secret, address resolver, address addr) view external returns (bytes32[] memory results);\n    \n    function batchCommit(bytes32[] memory commitments_) external;\n    \n    function batchRegisterWithConfig(string[] memory names, address owner, uint[] memory durations, bytes32 secret, address resolver, address addr) external payable;\n\n}\n"
    },
    "contracts/cidregistrar/IMIDRegistrarController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/*\n * @dev A registrar controller for registering and renewing names at fixed cost.\n */\ninterface IMIDRegistrarController {\n    function rentPrice(string memory name, uint duration) external view returns(uint);\n\n    function available(string memory name) external view returns(bool);\n\n    function makeCommitment(string memory name, address owner, bytes32 secret) pure external returns(bytes32);\n\n    function makeCommitmentWithConfig(string memory name, address owner, bytes32 secret, address resolver, address addr) pure external returns(bytes32);\n\n    function commit(bytes32 commitment) external;\n\n    function register(string calldata name, address owner, uint duration, bytes32 secret) external payable;\n\n    function registerWithConfig(string memory name, address owner, uint duration, bytes32 secret, address resolver, address addr) external payable;\n\n    function renew(string calldata name, uint duration) external payable;\n}\n\n\n"
    },
    "contracts/registry/MID.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface MID {\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner_);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner_);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver_);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl_);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function setRecord(bytes32 node, address owner_, address resolver_, uint64 ttl_) external;\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner_, address resolver_, uint64 ttl_) external;\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner_) external returns(bytes32);\n    function setResolver(bytes32 node, address resolver_) external;\n    function setOwner(bytes32 node, address owner_) external;\n    function setTTL(bytes32 node, uint64 ttl_) external;\n    function setApprovalForAll(address operator, bool approved) external;\n    function owner(bytes32 node) external view returns (address);\n    function resolver(bytes32 node) external view returns (address);\n    function ttl(bytes32 node) external view returns (uint64);\n    function recordExists(bytes32 node) external view returns (bool);\n    function isApprovedForAll(address owner_, address operator) external view returns (bool);\n}\n"
    },
    "contracts/resolvers/Resolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\npragma experimental ABIEncoderV2;\n\n/**\n * A generic resolver interface which includes all the functions including the ones deprecated\n */\ninterface Resolver{\n    event AddrChanged(bytes32 indexed node, address a);\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\n    event NameChanged(bytes32 indexed node, string name);\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\n    /* Deprecated events */\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\n\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\n    function addr(bytes32 node) external view returns (address);\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\n    function contenthash(bytes32 node) external view returns (bytes memory);\n    function dnsrr(bytes32 node) external view returns (bytes memory);\n    function name(bytes32 node) external view returns (string memory);\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\n    function text(bytes32 node, string calldata key) external view returns (string memory);\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\n    function setAddr(bytes32 node, address addr_) external;\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\n    function setContenthash(bytes32 node, bytes calldata hash) external;\n    function setDnsrr(bytes32 node, bytes calldata data) external;\n    function setName(bytes32 node, string calldata _name) external;\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\n    function setText(bytes32 node, string calldata key, string calldata value) external;\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\n\n    /* Deprecated functions */\n    function content(bytes32 node) external view returns (bytes32);\n    function multihash(bytes32 node) external view returns (bytes memory);\n    function setContent(bytes32 node, bytes32 hash) external;\n    function setMultihash(bytes32 node, bytes calldata hash) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}