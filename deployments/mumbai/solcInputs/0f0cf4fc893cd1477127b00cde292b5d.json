{
  "language": "Solidity",
  "sources": {
    "contracts/test/DummyMigrationSource.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ncontract DummySourceRegistry {\n    // namehash('bnb')\n    bytes32 constant private BASE_NODE = 0xdba5666821b22671387fe7ea11d7cc41ede85a5aa67c3e7b3d68ce6a661f389c;\n\n    struct Record {\n        address owner;\n        address resolver;\n        uint64 ttl;\n    }\n\n    mapping (bytes32 => Record) records;\n\n    function setOwnerByLabelName(string memory name_, address owner_) external {\n        bytes32 label = keccak256(bytes(name_));\n        bytes32 node = keccak256(abi.encodePacked(BASE_NODE, label));\n        setOwner(node, owner_);\n    }\n\n    function setOwner(bytes32 node, address owner_) public {\n        records[node].owner = owner_;\n    }\n\n    function owner(bytes32 node) public view returns (address) {\n        return records[node].owner;\n    }\n}\n\n\ncontract DummySourceBaseRegistrar {\n    mapping (uint256 => uint256) expiries;\n\n    function setNameExpiresByLabelName(string memory name_, uint256 expiry) public {\n        bytes32 label = keccak256(bytes(name_));\n        expiries[uint256(label)] = expiry;\n    } \n    \n    function setNameExpires(uint256 id, uint256 expiry) public {\n        expiries[id] = expiry;\n    }   \n    function nameExpires(uint256 id) public view returns (uint256) {\n        return expiries[id];\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}