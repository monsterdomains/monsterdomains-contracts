{
  "address": "0x6d75CaAB1B304b7B80c7da50D200f035Bf721942",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract MID",
          "name": "_mid",
          "type": "address"
        },
        {
          "internalType": "contract INameWrapper",
          "name": "wrapperAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedETHController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedReverseRegistrar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contentType",
          "type": "uint256"
        }
      ],
      "name": "ABIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newAddress",
          "type": "bytes"
        }
      ],
      "name": "AddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "ContenthashChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        }
      ],
      "name": "InterfaceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "PubkeyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "TextChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "contentTypes",
          "type": "uint256"
        }
      ],
      "name": "ABI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "contenthash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "interfaceImplementer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "pubkey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "contentType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setABI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "a",
          "type": "bytes"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        }
      ],
      "name": "setContenthash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        }
      ],
      "name": "setInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "setPubkey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x129e7af93cd1e58f0254ffd0a102d8260214349a092cf93533038dfeafcc88fb",
  "receipt": {
    "to": null,
    "from": "0xC04F124220694a2994b8C47D7adC43419B036293",
    "contractAddress": "0x6d75CaAB1B304b7B80c7da50D200f035Bf721942",
    "transactionIndex": 1,
    "gasUsed": "2799171",
    "logsBloom": "0x
    "blockHash": "0x55c54feb3f18ee65ebe1dcde722f74aea4540a9013aec347eb48dbfc8f17538a",
    "transactionHash": "0x129e7af93cd1e58f0254ffd0a102d8260214349a092cf93533038dfeafcc88fb",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30930805,
        "transactionHash": "0x129e7af93cd1e58f0254ffd0a102d8260214349a092cf93533038dfeafcc88fb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c04f124220694a2994b8c47d7adc43419b036293",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013b0beeb0bce0c000000000000000000000000000000000000000000000000092d84eb6eb4048b0000000000000000000000000000000000000000000001e09723547ab9b29c2a0000000000000000000000000000000000000000000000000919d42c83a8367f0000000000000000000000000000000000000000000001e097370539a4be6a36",
        "logIndex": 2,
        "blockHash": "0x55c54feb3f18ee65ebe1dcde722f74aea4540a9013aec347eb48dbfc8f17538a"
      }
    ],
    "blockNumber": 30930805,
    "cumulativeGasUsed": "2891862",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1AC13DE986239B8b38F957E7aB2ffc864184cf92",
    "0x0000000000000000000000000000000000000000",
    "0x107553abca0274099De61b1Bd19a7bBFAF372e78",
    "0x065727C4b0B333C6a0BD23b1E602067aCBf11eae"
  ],
  "numDeployments": 2,
  "solcInputHash": "43445803a792b59b290dfe234179bf78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract MID\",\"name\":\"_mid\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"wrapperAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedETHController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedReverseRegistrar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ABI(bytes32,uint256)\":{\"params\":{\"contentTypes\":\"A bitwise OR of the ABI formats accepted by the caller.\",\"node\":\"The MID node to query\"},\"returns\":{\"_0\":\"contentType The content type of the return value\",\"_1\":\"data The ABI data\"}},\"addr(bytes32)\":{\"params\":{\"node\":\"The MID node to query.\"},\"returns\":{\"_0\":\"The associated address.\"}},\"contenthash(bytes32)\":{\"params\":{\"node\":\"The MID node to query.\"},\"returns\":{\"_0\":\"The associated contenthash.\"}},\"interfaceImplementer(bytes32,bytes4)\":{\"params\":{\"interfaceID\":\"The EIP 165 interface ID to check for.\",\"node\":\"The MID node to query.\"},\"returns\":{\"_0\":\"The address that implements this interface, or 0 if the interface is unsupported.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"name(bytes32)\":{\"params\":{\"node\":\"The MID node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"pubkey(bytes32)\":{\"params\":{\"node\":\"The MID node to query\"},\"returns\":{\"x\":\"The X coordinate of the curve point for the public key.\",\"y\":\"The Y coordinate of the curve point for the public key.\"}},\"setABI(bytes32,uint256,bytes)\":{\"params\":{\"contentType\":\"The content type of the ABI\",\"data\":\"The ABI data.\",\"node\":\"The node to update.\"}},\"setAddr(bytes32,address)\":{\"params\":{\"a\":\"The address to set.\",\"node\":\"The node to update.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setContenthash(bytes32,bytes)\":{\"params\":{\"hash\":\"The contenthash to set\",\"node\":\"The node to update.\"}},\"setInterface(bytes32,bytes4,address)\":{\"params\":{\"implementer\":\"The address of a contract that implements this interface for this node.\",\"interfaceID\":\"The EIP 165 interface ID.\",\"node\":\"The node to update.\"}},\"setName(bytes32,string)\":{\"params\":{\"name_\":\"The name to set.\",\"node\":\"The node to update.\"}},\"setPubkey(bytes32,bytes32,bytes32)\":{\"params\":{\"node\":\"The MID node to query\",\"x\":\"the X coordinate of the curve point for the public key.\",\"y\":\"the Y coordinate of the curve point for the public key.\"}},\"setText(bytes32,string,string)\":{\"params\":{\"key\":\"The key to set.\",\"node\":\"The node to update.\",\"value\":\"The text data value to set.\"}},\"text(bytes32,string)\":{\"params\":{\"key\":\"The text data key to query.\",\"node\":\"The MID node to query.\"},\"returns\":{\"_0\":\"The associated text data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ABI(bytes32,uint256)\":{\"notice\":\"Returns the ABI associated with an MID node. Defined in EIP205.\"},\"addr(bytes32)\":{\"notice\":\"Returns the address associated with an MID node.\"},\"contenthash(bytes32)\":{\"notice\":\"Returns the contenthash associated with an MID node.\"},\"interfaceImplementer(bytes32,bytes4)\":{\"notice\":\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\"},\"name(bytes32)\":{\"notice\":\"Returns the name associated with an MID node, for reverse records. Defined in EIP181.\"},\"pubkey(bytes32)\":{\"notice\":\"Returns the SECP256k1 public key associated with an MID node. Defined in EIP 619.\"},\"setABI(bytes32,uint256,bytes)\":{\"notice\":\"Sets the ABI associated with an MID node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets the address associated with an MID node. May only be called by the owner of that node in the MID registry.\"},\"setContenthash(bytes32,bytes)\":{\"notice\":\"Sets the contenthash associated with an MID node. May only be called by the owner of that node in the MID registry.\"},\"setInterface(bytes32,bytes4,address)\":{\"notice\":\"Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\"},\"setName(bytes32,string)\":{\"notice\":\"Sets the name associated with an MID node, for reverse records. May only be called by the owner of that node in the MID registry.\"},\"setPubkey(bytes32,bytes32,bytes32)\":{\"notice\":\"Sets the SECP256k1 public key associated with an MID node.\"},\"setText(bytes32,string,string)\":{\"notice\":\"Sets the text data associated with an MID node and key. May only be called by the owner of that node in the MID registry.\"},\"text(bytes32,string)\":{\"notice\":\"Returns the text data associated with an MID node and key.\"}},\"notice\":\"A simple resolver anyone can use; only allows the owner of a node to set its address.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/PublicResolver.sol\":\"PublicResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/registry/MID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface MID {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner_);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner_);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver_);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl_);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner_, address resolver_, uint64 ttl_) external;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner_, address resolver_, uint64 ttl_) external;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner_) external returns(bytes32);\\n    function setResolver(bytes32 node, address resolver_) external;\\n    function setOwner(bytes32 node, address owner_) external;\\n    function setTTL(bytes32 node, uint64 ttl_) external;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function owner(bytes32 node) external view returns (address);\\n    function resolver(bytes32 node) external view returns (address);\\n    function ttl(bytes32 node) external view returns (uint64);\\n    function recordExists(bytes32 node) external view returns (bool);\\n    function isApprovedForAll(address owner_, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4d65afeff578bd86691b8e99cf17138effdb3cd0e74a08fecbbeeeae604fb2f7\",\"license\":\"MIT\"},\"contracts/resolvers/PublicResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../registry/MID.sol\\\";\\nimport \\\"./profiles/ABIResolver.sol\\\";\\nimport \\\"./profiles/AddrResolver.sol\\\";\\nimport \\\"./profiles/ContentHashResolver.sol\\\";\\nimport \\\"./profiles/InterfaceResolver.sol\\\";\\nimport \\\"./profiles/NameResolver.sol\\\";\\nimport \\\"./profiles/PubkeyResolver.sol\\\";\\nimport \\\"./profiles/TextResolver.sol\\\";\\n\\ninterface INameWrapper {\\n    function ownerOf(uint256 id) external view returns (address);\\n}\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver is ABIResolver, AddrResolver, ContentHashResolver, InterfaceResolver, NameResolver, PubkeyResolver, TextResolver {\\n    MID mid;\\n    INameWrapper nameWrapper;\\n    address immutable trustedETHController;\\n    address immutable trustedReverseRegistrar;\\n\\n    /**\\n     * A mapping of operators. An address that is authorised for an address\\n     * may make any changes to the name that the owner could, but may not update\\n     * the set of authorisations.\\n     * (owner, operator) => approved\\n     */\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    constructor(\\n        MID _mid, \\n        INameWrapper wrapperAddress,\\n        address _trustedETHController,\\n        address _trustedReverseRegistrar\\n    ) {\\n        mid = _mid;\\n        nameWrapper = wrapperAddress;\\n        trustedETHController = _trustedETHController;\\n        trustedReverseRegistrar = _trustedReverseRegistrar;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external{\\n        require(\\n            msg.sender != operator,\\n            \\\"ERC1155: setting approval status for self\\\"\\n        );\\n\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function isAuthorised(bytes32 node) internal override view returns(bool) {\\n        if (\\n            msg.sender == trustedETHController ||\\n            msg.sender == trustedReverseRegistrar\\n        ) {\\n            return true;\\n        }\\n        address owner = mid.owner(node);\\n        if(owner == address(nameWrapper) ){\\n            owner = nameWrapper.ownerOf(uint256(node));\\n        }\\n        return owner == msg.sender || isApprovedForAll(owner, msg.sender);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view returns (bool){\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for(uint i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n            require(success, \\\"delegatecall failed\\\");\\n            results[i] = result;\\n        }\\n        return results;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override(ABIResolver, AddrResolver, ContentHashResolver, InterfaceResolver, NameResolver, PubkeyResolver, TextResolver) public pure returns(bool) {\\n        return super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xfea7049725c54f0c1ff7cd9dca1abf35e70f8bfdd7e5250303fea67d44046d6a\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\nabstract contract ResolverBase {\\n    bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n    function supportsInterface(bytes4 interfaceID) virtual public pure returns(bool) {\\n        return interfaceID == INTERFACE_META_ID;\\n    }\\n\\n    function isAuthorised(bytes32 node) internal virtual view returns(bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node), \\\"not authorised\\\");\\n        _;\\n    }\\n\\n    function bytesToAddress(bytes memory b) internal pure returns(address payable a) {\\n        require(b.length == 20, \\\"bytes length must be 20\\\");\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12))\\n        }\\n    }\\n\\n    function addressToBytes(address a) internal pure returns(bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb588af5be18c44ce53e0d922afce8eb4d07bf339bc9ae5e058df0e800458f58b\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\nimport \\\"../ResolverBase.sol\\\";\\n\\nabstract contract ABIResolver is ResolverBase {\\n    bytes4 constant private ABI_INTERFACE_ID = 0x2203ab56;\\n\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    mapping(bytes32=>mapping(uint256=>bytes)) abis;\\n\\n    /**\\n     * Sets the ABI associated with an MID node.\\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n     * the empty string.\\n     * @param node The node to update.\\n     * @param contentType The content type of the ABI\\n     * @param data The ABI data.\\n     */\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external authorised(node) {\\n        // Content types must be powers of 2\\n        require(((contentType - 1) & contentType) == 0);\\n\\n        abis[node][contentType] = data;\\n        emit ABIChanged(node, contentType);\\n    }\\n\\n    /**\\n     * Returns the ABI associated with an MID node.\\n     * Defined in EIP205.\\n     * @param node The MID node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory) {\\n        mapping(uint256=>bytes) storage abiset = abis[node];\\n\\n        for (uint256 contentType = 1; contentType <= contentTypes; contentType <<= 1) {\\n            if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n                return (contentType, abiset[contentType]);\\n            }\\n        }\\n\\n        return (0, bytes(\\\"\\\"));\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == ABI_INTERFACE_ID || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x0cc2053afb3fb517f625107e88f8ee308a651ba54355af76118bf8055d792e74\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/AddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\nimport \\\"../ResolverBase.sol\\\";\\n\\nabstract contract AddrResolver is ResolverBase {\\n    bytes4 constant private ADDR_INTERFACE_ID = 0x3b3b57de;\\n    bytes4 constant private ADDRESS_INTERFACE_ID = 0xf1cb7e06;\\n    uint constant private COIN_TYPE_ETH = 60;\\n\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n\\n    mapping(bytes32=>mapping(uint=>bytes)) _addresses;\\n\\n    /**\\n     * Sets the address associated with an MID node.\\n     * May only be called by the owner of that node in the MID registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(bytes32 node, address a) external authorised(node) {\\n        setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n    }\\n\\n    /**\\n     * Returns the address associated with an MID node.\\n     * @param node The MID node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) public view returns (address payable) {\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\n        if(a.length == 0) {\\n            return payable(0);\\n        }\\n        return bytesToAddress(a);\\n    }\\n\\n    function setAddr(bytes32 node, uint coinType, bytes memory a) public authorised(node) {\\n        emit AddressChanged(node, coinType, a);\\n        if(coinType == COIN_TYPE_ETH) {\\n            emit AddrChanged(node, bytesToAddress(a));\\n        }\\n        _addresses[node][coinType] = a;\\n    }\\n\\n    function addr(bytes32 node, uint coinType) public view returns(bytes memory) {\\n        return _addresses[node][coinType];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == ADDR_INTERFACE_ID || interfaceID == ADDRESS_INTERFACE_ID || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x5f80c2b22033ff25d02cecc04b4943a254191c78c1b24a7256a042eef4779bfb\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\nimport \\\"../ResolverBase.sol\\\";\\n\\nabstract contract ContentHashResolver is ResolverBase {\\n    bytes4 constant private CONTENT_HASH_INTERFACE_ID = 0xbc1c58d1;\\n\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    mapping(bytes32=>bytes) hashes;\\n\\n    /**\\n     * Sets the contenthash associated with an MID node.\\n     * May only be called by the owner of that node in the MID registry.\\n     * @param node The node to update.\\n     * @param hash The contenthash to set\\n     */\\n    function setContenthash(bytes32 node, bytes calldata hash) external authorised(node) {\\n        hashes[node] = hash;\\n        emit ContenthashChanged(node, hash);\\n    }\\n\\n    /**\\n     * Returns the contenthash associated with an MID node.\\n     * @param node The MID node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory) {\\n        return hashes[node];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == CONTENT_HASH_INTERFACE_ID || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xb34aba45a43d2818b4f1214f80bbfa46a4640471ee499a981c6277609cf23b68\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/InterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./AddrResolver.sol\\\";\\n\\nabstract contract InterfaceResolver is ResolverBase, AddrResolver {\\n    bytes4 constant private INTERFACE_INTERFACE_ID = bytes4(keccak256(\\\"interfaceImplementer(bytes32,bytes4)\\\"));\\n    bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n\\n    event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\\n\\n    mapping(bytes32=>mapping(bytes4=>address)) interfaces;\\n\\n    /**\\n     * Sets an interface associated with a name.\\n     * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n     * @param node The node to update.\\n     * @param interfaceID The EIP 165 interface ID.\\n     * @param implementer The address of a contract that implements this interface for this node.\\n     */\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external authorised(node) {\\n        interfaces[node][interfaceID] = implementer;\\n        emit InterfaceChanged(node, interfaceID, implementer);\\n    }\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The MID node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address) {\\n        address implementer = interfaces[node][interfaceID];\\n        if(implementer != address(0)) {\\n            return implementer;\\n        }\\n\\n        address a = addr(node);\\n        if(a == address(0)) {\\n            return address(0);\\n        }\\n\\n        (bool success, bytes memory returnData) = a.staticcall(abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", INTERFACE_META_ID));\\n        if(!success || returnData.length < 32 || returnData[31] == 0) {\\n            // EIP 165 not supported by target\\n            return address(0);\\n        }\\n\\n        (success, returnData) = a.staticcall(abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", interfaceID));\\n        if(!success || returnData.length < 32 || returnData[31] == 0) {\\n            // Specified interface not supported by target\\n            return address(0);\\n        }\\n\\n        return a;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override(AddrResolver, ResolverBase) public pure returns(bool) {\\n        return interfaceID == INTERFACE_INTERFACE_ID || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xfd12374129e8a82bbcbcc6077e7b1ed640b51a39b597fc331c04a958d958364e\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/NameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\nimport \\\"../ResolverBase.sol\\\";\\n\\nabstract contract NameResolver is ResolverBase {\\n    bytes4 constant private NAME_INTERFACE_ID = 0x691f3431;\\n\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    mapping(bytes32=>string) names;\\n\\n    /**\\n     * Sets the name associated with an MID node, for reverse records.\\n     * May only be called by the owner of that node in the MID registry.\\n     * @param node The node to update.\\n     * @param name_ The name to set.\\n     */\\n    function setName(bytes32 node, string calldata name_) external authorised(node) {\\n        names[node] = name_;\\n        emit NameChanged(node, name_);\\n    }\\n\\n    /**\\n     * Returns the name associated with an MID node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The MID node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory) {\\n        return names[node];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xbb3799e5797afea0942d0178830b41a2cfe26ffcdf57b70e661a9b1680fdb4f0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/PubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\nimport \\\"../ResolverBase.sol\\\";\\n\\nabstract contract PubkeyResolver is ResolverBase {\\n    bytes4 constant private PUBKEY_INTERFACE_ID = 0xc8690233;\\n\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    struct PublicKey {\\n        bytes32 x;\\n        bytes32 y;\\n    }\\n\\n    mapping(bytes32=>PublicKey) pubkeys;\\n\\n    /**\\n     * Sets the SECP256k1 public key associated with an MID node.\\n     * @param node The MID node to query\\n     * @param x the X coordinate of the curve point for the public key.\\n     * @param y the Y coordinate of the curve point for the public key.\\n     */\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external authorised(node) {\\n        pubkeys[node] = PublicKey(x, y);\\n        emit PubkeyChanged(node, x, y);\\n    }\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an MID node.\\n     * Defined in EIP 619.\\n     * @param node The MID node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y) {\\n        return (pubkeys[node].x, pubkeys[node].y);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == PUBKEY_INTERFACE_ID || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xdd3e41258a52b840839c8e7c91f3a5d48eeedbace4e5953b4cbbbb186344097c\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/TextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\nimport \\\"../ResolverBase.sol\\\";\\n\\nabstract contract TextResolver is ResolverBase {\\n    bytes4 constant private TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    mapping(bytes32=>mapping(string=>string)) texts;\\n\\n    /**\\n     * Sets the text data associated with an MID node and key.\\n     * May only be called by the owner of that node in the MID registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(bytes32 node, string calldata key, string calldata value) external authorised(node) {\\n        texts[node][key] = value;\\n        emit TextChanged(node, key, key);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an MID node and key.\\n     * @param node The MID node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key) external view returns (string memory) {\\n        return texts[node][key];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == TEXT_INTERFACE_ID || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x00ccd9b1389e35f9009dcbac1dc03924bca1ad613e0f040ab56e794ee37ac46d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806377372213116100ad578063c869023311610071578063c869023314610376578063d5fa2b00146103a7578063e59d895d146103c3578063e985e9c5146103df578063f1cb7e061461040f5761012c565b806377372213146102c25780638b95dd71146102de578063a22cb465146102fa578063ac9650d814610316578063bc1c58d1146103465761012c565b8063304e6ade116100f4578063304e6ade146101fa5780633b3b57de1461021657806359d1d43c14610246578063623195b014610276578063691f3431146102925761012c565b806301ffc9a71461013157806310f13a8c14610161578063124a319c1461017d5780632203ab56146101ad57806329cd62ea146101de575b600080fd5b61014b6004803603810190610146919061263e565b61043f565b6040516101589190612a21565b60405180910390f35b61017b600480360381019061017691906124a6565b610451565b005b6101976004803603810190610192919061236b565b610535565b6040516101a491906129ae565b60405180910390f35b6101c760048036038101906101c2919061252f565b610979565b6040516101d5929190612bc2565b60405180910390f35b6101f860048036038101906101f3919061231c565b610aad565b005b610214600480360381019061020f91906123f6565b610b75565b005b610230600480360381019061022b91906122b7565b610c21565b60405161023d91906129e4565b60405180910390f35b610260600480360381019061025b919061244e565b610c57565b60405161026d9190612b05565b60405180910390f35b610290600480360381019061028b919061256b565b610d1c565b005b6102ac60048036038101906102a791906122b7565b610de8565b6040516102b99190612b05565b60405180910390f35b6102dc60048036038101906102d7919061244e565b610e8d565b005b6102f860048036038101906102f391906125d7565b610f39565b005b610314600480360381019061030f9190612236565b611045565b005b610330600480360381019061032b9190612272565b6111b1565b60405161033d91906129ff565b60405180910390f35b610360600480360381019061035b91906122b7565b611393565b60405161036d9190612abf565b60405180910390f35b610390600480360381019061038b91906122b7565b611438565b60405161039e929190612a57565b60405180910390f35b6103c160048036038101906103bc91906122e0565b611472565b005b6103dd60048036038101906103d891906123a7565b6114d4565b005b6103f960048036038101906103f491906121fa565b61161c565b6040516104069190612a21565b60405180910390f35b6104296004803603810190610424919061252f565b6116b0565b6040516104369190612abf565b60405180910390f35b600061044a82611767565b9050919050565b8461045b816117c8565b61049a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049190612b67565b60405180910390fd5b82826006600089815260200190815260200160002087876040516104bf929190612995565b908152602001604051809103902091906104da929190611e5e565b5084846040516104eb929190612995565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a75508787604051610525929190612ae1565b60405180910390a3505050505050565b600080600360008581526020019081526020016000206000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105fa5780915050610973565b600061060585610c21565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561064757600092505050610973565b6000808273ffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b6040516024016106799190612a80565b6040516020818303038152906040527f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610703919061297e565b600060405180830381855afa9150503d806000811461073e576040519150601f19603f3d011682016040523d82523d6000602084013e610743565b606091505b5091509150811580610756575060208151105b806107ca5750600060f81b81601f8151811061079b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156107dc576000945050505050610973565b8273ffffffffffffffffffffffffffffffffffffffff16866040516024016108049190612a80565b6040516020818303038152906040527f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161088e919061297e565b600060405180830381855afa9150503d80600081146108c9576040519150601f19603f3d011682016040523d82523d6000602084013e6108ce565b606091505b5080925081935050508115806108e5575060208151105b806109595750600060f81b81601f8151811061092a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561096b576000945050505050610973565b829450505050505b92915050565b60006060600080600086815260200190815260200160002090506000600190505b848111610a8d576000858216141580156109d25750600082600083815260200190815260200160002080546109ce90612e73565b9050115b15610a8157808260008381526020019081526020016000208080546109f690612e73565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2290612e73565b8015610a6f5780601f10610a4457610100808354040283529160200191610a6f565b820191906000526020600020905b815481529060010190602001808311610a5257829003601f168201915b50505050509050935093505050610aa6565b600181901b905061099a565b5060006040518060200160405280600081525092509250505b9250929050565b82610ab7816117c8565b610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90612b67565b60405180910390fd5b604051806040016040528084815260200183815250600560008681526020019081526020016000206000820151816000015560208201518160010155905050837f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e468484604051610b67929190612a57565b60405180910390a250505050565b82610b7f816117c8565b610bbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb590612b67565b60405180910390fd5b8282600260008781526020019081526020016000209190610be0929190611ee4565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610c13929190612a9b565b60405180910390a250505050565b600080610c2f83603c6116b0565b9050600081511415610c45576000915050610c52565b610c4e81611a7c565b9150505b919050565b6060600660008581526020019081526020016000208383604051610c7c929190612995565b90815260200160405180910390208054610c9590612e73565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc190612e73565b8015610d0e5780601f10610ce357610100808354040283529160200191610d0e565b820191906000526020600020905b815481529060010190602001808311610cf157829003601f168201915b505050505090509392505050565b83610d26816117c8565b610d65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5c90612b67565b60405180910390fd5b600084600186610d759190612d37565b1614610d8057600080fd5b828260008088815260200190815260200160002060008781526020019081526020016000209190610db2929190611ee4565b5083857faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe360405160405180910390a35050505050565b6060600460008381526020019081526020016000208054610e0890612e73565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3490612e73565b8015610e815780601f10610e5657610100808354040283529160200191610e81565b820191906000526020600020905b815481529060010190602001808311610e6457829003601f168201915b50505050509050919050565b82610e97816117c8565b610ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecd90612b67565b60405180910390fd5b8282600460008781526020019081526020016000209190610ef8929190611e5e565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610f2b929190612ae1565b60405180910390a250505050565b82610f43816117c8565b610f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7990612b67565b60405180910390fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051610fb4929190612bc2565b60405180910390a2603c83141561100657837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2610ff084611a7c565b604051610ffd91906129c9565b60405180910390a25b81600160008681526020019081526020016000206000858152602001908152602001600020908051906020019061103e929190611f6a565b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156110b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ab90612b87565b60405180910390fd5b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111a59190612a21565b60405180910390a35050565b60608282905067ffffffffffffffff8111156111f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561122957816020015b60608152602001906001900390816112145790505b50905060005b8383905081101561138c576000803073ffffffffffffffffffffffffffffffffffffffff1686868581811061128d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200281019061129f9190612bf2565b6040516112ad929190612965565b600060405180830381855af49150503d80600081146112e8576040519150601f19603f3d011682016040523d82523d6000602084013e6112ed565b606091505b509150915081611332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132990612b27565b60405180910390fd5b8084848151811061136c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505050808061138490612ed6565b91505061122f565b5092915050565b60606002600083815260200190815260200160002080546113b390612e73565b80601f01602080910402602001604051908101604052809291908181526020018280546113df90612e73565b801561142c5780601f106114015761010080835404028352916020019161142c565b820191906000526020600020905b81548152906001019060200180831161140f57829003601f168201915b50505050509050919050565b6000806005600084815260200190815260200160002060000154600560008581526020019081526020016000206001015491509150915091565b8161147c816117c8565b6114bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b290612b67565b60405180910390fd5b6114cf83603c6114ca85611ad5565b610f39565b505050565b826114de816117c8565b61151d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151490612b67565b60405180910390fd5b81600360008681526020019081526020016000206000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916847f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa8460405161160e91906129ae565b60405180910390a350505050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060016000848152602001908152602001600020600083815260200190815260200160002080546116e190612e73565b80601f016020809104026020016040519081016040528092919081815260200182805461170d90612e73565b801561175a5780601f1061172f5761010080835404028352916020019161175a565b820191906000526020600020905b81548152906001019060200180831161173d57829003601f168201915b5050505050905092915050565b60006359d1d43c60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806117c157506117c082611b5f565b5b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061186f57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561187d5760019050611a77565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b81526004016118da9190612a3c565b60206040518083038186803b1580156118f257600080fd5b505afa158015611906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192a91906121d1565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a3357600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8460001c6040518263ffffffff1660e01b81526004016119e09190612ba7565b60206040518083038186803b1580156119f857600080fd5b505afa158015611a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3091906121d1565b90505b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480611a735750611a72813361161c565b5b9150505b919050565b60006014825114611ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab990612b47565b60405180910390fd5b600c6101000a6020830151049050919050565b6060601467ffffffffffffffff811115611b18577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611b4a5781602001600182028036833780820191505090505b509050600c6101000a82026020820152919050565b600063c869023360e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611bb95750611bb882611bc0565b5b9050919050565b600063691f343160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c1a5750611c1982611c21565b5b9050919050565b60007f124a319c1247f4318c3c16c7e9cc865d0fb5d80d7bf02f56cafc0d14da0208507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c945750611c9382611c9b565b5b9050919050565b600063bc1c58d160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611cf55750611cf482611cfc565b5b9050919050565b6000633b3b57de60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611d95575063f1cb7e0660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611da55750611da482611dac565b5b9050919050565b6000632203ab5660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611e065750611e0582611e0d565b5b9050919050565b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b828054611e6a90612e73565b90600052602060002090601f016020900481019282611e8c5760008555611ed3565b82601f10611ea557803560ff1916838001178555611ed3565b82800160010185558215611ed3579182015b82811115611ed2578235825591602001919060010190611eb7565b5b509050611ee09190611ff0565b5090565b828054611ef090612e73565b90600052602060002090601f016020900481019282611f125760008555611f59565b82601f10611f2b57803560ff1916838001178555611f59565b82800160010185558215611f59579182015b82811115611f58578235825591602001919060010190611f3d565b5b509050611f669190611ff0565b5090565b828054611f7690612e73565b90600052602060002090601f016020900481019282611f985760008555611fdf565b82601f10611fb157805160ff1916838001178555611fdf565b82800160010185558215611fdf579182015b82811115611fde578251825591602001919060010190611fc3565b5b509050611fec9190611ff0565b5090565b5b80821115612009576000816000905550600101611ff1565b5090565b600061202061201b84612c6e565b612c49565b90508281526020810184848401111561203857600080fd5b612043848285612e31565b509392505050565b60008135905061205a81613087565b92915050565b60008151905061206f81613087565b92915050565b60008083601f84011261208757600080fd5b8235905067ffffffffffffffff8111156120a057600080fd5b6020830191508360208202830111156120b857600080fd5b9250929050565b6000813590506120ce8161309e565b92915050565b6000813590506120e3816130b5565b92915050565b6000813590506120f8816130cc565b92915050565b60008083601f84011261211057600080fd5b8235905067ffffffffffffffff81111561212957600080fd5b60208301915083600182028301111561214157600080fd5b9250929050565b600082601f83011261215957600080fd5b813561216984826020860161200d565b91505092915050565b60008083601f84011261218457600080fd5b8235905067ffffffffffffffff81111561219d57600080fd5b6020830191508360018202830111156121b557600080fd5b9250929050565b6000813590506121cb816130e3565b92915050565b6000602082840312156121e357600080fd5b60006121f184828501612060565b91505092915050565b6000806040838503121561220d57600080fd5b600061221b8582860161204b565b925050602061222c8582860161204b565b9150509250929050565b6000806040838503121561224957600080fd5b60006122578582860161204b565b9250506020612268858286016120bf565b9150509250929050565b6000806020838503121561228557600080fd5b600083013567ffffffffffffffff81111561229f57600080fd5b6122ab85828601612075565b92509250509250929050565b6000602082840312156122c957600080fd5b60006122d7848285016120d4565b91505092915050565b600080604083850312156122f357600080fd5b6000612301858286016120d4565b92505060206123128582860161204b565b9150509250929050565b60008060006060848603121561233157600080fd5b600061233f868287016120d4565b9350506020612350868287016120d4565b9250506040612361868287016120d4565b9150509250925092565b6000806040838503121561237e57600080fd5b600061238c858286016120d4565b925050602061239d858286016120e9565b9150509250929050565b6000806000606084860312156123bc57600080fd5b60006123ca868287016120d4565b93505060206123db868287016120e9565b92505060406123ec8682870161204b565b9150509250925092565b60008060006040848603121561240b57600080fd5b6000612419868287016120d4565b935050602084013567ffffffffffffffff81111561243657600080fd5b612442868287016120fe565b92509250509250925092565b60008060006040848603121561246357600080fd5b6000612471868287016120d4565b935050602084013567ffffffffffffffff81111561248e57600080fd5b61249a86828701612172565b92509250509250925092565b6000806000806000606086880312156124be57600080fd5b60006124cc888289016120d4565b955050602086013567ffffffffffffffff8111156124e957600080fd5b6124f588828901612172565b9450945050604086013567ffffffffffffffff81111561251457600080fd5b61252088828901612172565b92509250509295509295909350565b6000806040838503121561254257600080fd5b6000612550858286016120d4565b9250506020612561858286016121bc565b9150509250929050565b6000806000806060858703121561258157600080fd5b600061258f878288016120d4565b94505060206125a0878288016121bc565b935050604085013567ffffffffffffffff8111156125bd57600080fd5b6125c9878288016120fe565b925092505092959194509250565b6000806000606084860312156125ec57600080fd5b60006125fa868287016120d4565b935050602061260b868287016121bc565b925050604084013567ffffffffffffffff81111561262857600080fd5b61263486828701612148565b9150509250925092565b60006020828403121561265057600080fd5b600061265e848285016120e9565b91505092915050565b6000612673838361279c565b905092915050565b61268481612dfb565b82525050565b61269381612d7d565b82525050565b6126a281612d6b565b82525050565b60006126b382612caf565b6126bd8185612cdd565b9350836020820285016126cf85612c9f565b8060005b8581101561270b57848403895281516126ec8582612667565b94506126f783612cd0565b925060208a019950506001810190506126d3565b50829750879550505050505092915050565b61272681612d8f565b82525050565b61273581612d9b565b82525050565b61274481612da5565b82525050565b60006127568385612cff565b9350612763838584612e31565b61276c83612fac565b840190509392505050565b60006127838385612d10565b9350612790838584612e31565b82840190509392505050565b60006127a782612cba565b6127b18185612cee565b93506127c1818560208601612e40565b6127ca81612fac565b840191505092915050565b60006127e082612cba565b6127ea8185612cff565b93506127fa818560208601612e40565b61280381612fac565b840191505092915050565b600061281982612cba565b6128238185612d10565b9350612833818560208601612e40565b80840191505092915050565b600061284b8385612d1b565b9350612858838584612e31565b61286183612fac565b840190509392505050565b60006128788385612d2c565b9350612885838584612e31565b82840190509392505050565b600061289c82612cc5565b6128a68185612d1b565b93506128b6818560208601612e40565b6128bf81612fac565b840191505092915050565b60006128d7601383612d1b565b91506128e282612fbd565b602082019050919050565b60006128fa601783612d1b565b915061290582612fe6565b602082019050919050565b600061291d600e83612d1b565b91506129288261300f565b602082019050919050565b6000612940602983612d1b565b915061294b82613038565b604082019050919050565b61295f81612df1565b82525050565b6000612972828486612777565b91508190509392505050565b600061298a828461280e565b915081905092915050565b60006129a282848661286c565b91508190509392505050565b60006020820190506129c36000830184612699565b92915050565b60006020820190506129de600083018461267b565b92915050565b60006020820190506129f9600083018461268a565b92915050565b60006020820190508181036000830152612a1981846126a8565b905092915050565b6000602082019050612a36600083018461271d565b92915050565b6000602082019050612a51600083018461272c565b92915050565b6000604082019050612a6c600083018561272c565b612a79602083018461272c565b9392505050565b6000602082019050612a95600083018461273b565b92915050565b60006020820190508181036000830152612ab681848661274a565b90509392505050565b60006020820190508181036000830152612ad981846127d5565b905092915050565b60006020820190508181036000830152612afc81848661283f565b90509392505050565b60006020820190508181036000830152612b1f8184612891565b905092915050565b60006020820190508181036000830152612b40816128ca565b9050919050565b60006020820190508181036000830152612b60816128ed565b9050919050565b60006020820190508181036000830152612b8081612910565b9050919050565b60006020820190508181036000830152612ba081612933565b9050919050565b6000602082019050612bbc6000830184612956565b92915050565b6000604082019050612bd76000830185612956565b8181036020830152612be981846127d5565b90509392505050565b60008083356001602003843603038112612c0b57600080fd5b80840192508235915067ffffffffffffffff821115612c2957600080fd5b602083019250600182023603831315612c4157600080fd5b509250929050565b6000612c53612c64565b9050612c5f8282612ea5565b919050565b6000604051905090565b600067ffffffffffffffff821115612c8957612c88612f7d565b5b612c9282612fac565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612d4282612df1565b9150612d4d83612df1565b925082821015612d6057612d5f612f1f565b5b828203905092915050565b6000612d7682612dd1565b9050919050565b6000612d8882612dd1565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612e0682612e0d565b9050919050565b6000612e1882612e1f565b9050919050565b6000612e2a82612dd1565b9050919050565b82818337600083830152505050565b60005b83811015612e5e578082015181840152602081019050612e43565b83811115612e6d576000848401525b50505050565b60006002820490506001821680612e8b57607f821691505b60208210811415612e9f57612e9e612f4e565b5b50919050565b612eae82612fac565b810181811067ffffffffffffffff82111715612ecd57612ecc612f7d565b5b80604052505050565b6000612ee182612df1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f1457612f13612f1f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f64656c656761746563616c6c206661696c656400000000000000000000000000600082015250565b7f6279746573206c656e677468206d757374206265203230000000000000000000600082015250565b7f6e6f7420617574686f7269736564000000000000000000000000000000000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b61309081612d6b565b811461309b57600080fd5b50565b6130a781612d8f565b81146130b257600080fd5b50565b6130be81612d9b565b81146130c957600080fd5b50565b6130d581612da5565b81146130e057600080fd5b50565b6130ec81612df1565b81146130f757600080fd5b5056fea2646970667358221220151b10de14fe75e7fa9abba8db2e14ef861208b8e5c7e87460c4c5905e142a6064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "ABI(bytes32,uint256)": {
        "params": {
          "contentTypes": "A bitwise OR of the ABI formats accepted by the caller.",
          "node": "The MID node to query"
        },
        "returns": {
          "_0": "contentType The content type of the return value",
          "_1": "data The ABI data"
        }
      },
      "addr(bytes32)": {
        "params": {
          "node": "The MID node to query."
        },
        "returns": {
          "_0": "The associated address."
        }
      },
      "contenthash(bytes32)": {
        "params": {
          "node": "The MID node to query."
        },
        "returns": {
          "_0": "The associated contenthash."
        }
      },
      "interfaceImplementer(bytes32,bytes4)": {
        "params": {
          "interfaceID": "The EIP 165 interface ID to check for.",
          "node": "The MID node to query."
        },
        "returns": {
          "_0": "The address that implements this interface, or 0 if the interface is unsupported."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "name(bytes32)": {
        "params": {
          "node": "The MID node to query."
        },
        "returns": {
          "_0": "The associated name."
        }
      },
      "pubkey(bytes32)": {
        "params": {
          "node": "The MID node to query"
        },
        "returns": {
          "x": "The X coordinate of the curve point for the public key.",
          "y": "The Y coordinate of the curve point for the public key."
        }
      },
      "setABI(bytes32,uint256,bytes)": {
        "params": {
          "contentType": "The content type of the ABI",
          "data": "The ABI data.",
          "node": "The node to update."
        }
      },
      "setAddr(bytes32,address)": {
        "params": {
          "a": "The address to set.",
          "node": "The node to update."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setContenthash(bytes32,bytes)": {
        "params": {
          "hash": "The contenthash to set",
          "node": "The node to update."
        }
      },
      "setInterface(bytes32,bytes4,address)": {
        "params": {
          "implementer": "The address of a contract that implements this interface for this node.",
          "interfaceID": "The EIP 165 interface ID.",
          "node": "The node to update."
        }
      },
      "setName(bytes32,string)": {
        "params": {
          "name_": "The name to set.",
          "node": "The node to update."
        }
      },
      "setPubkey(bytes32,bytes32,bytes32)": {
        "params": {
          "node": "The MID node to query",
          "x": "the X coordinate of the curve point for the public key.",
          "y": "the Y coordinate of the curve point for the public key."
        }
      },
      "setText(bytes32,string,string)": {
        "params": {
          "key": "The key to set.",
          "node": "The node to update.",
          "value": "The text data value to set."
        }
      },
      "text(bytes32,string)": {
        "params": {
          "key": "The text data key to query.",
          "node": "The MID node to query."
        },
        "returns": {
          "_0": "The associated text data."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ABI(bytes32,uint256)": {
        "notice": "Returns the ABI associated with an MID node. Defined in EIP205."
      },
      "addr(bytes32)": {
        "notice": "Returns the address associated with an MID node."
      },
      "contenthash(bytes32)": {
        "notice": "Returns the contenthash associated with an MID node."
      },
      "interfaceImplementer(bytes32,bytes4)": {
        "notice": "Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."
      },
      "name(bytes32)": {
        "notice": "Returns the name associated with an MID node, for reverse records. Defined in EIP181."
      },
      "pubkey(bytes32)": {
        "notice": "Returns the SECP256k1 public key associated with an MID node. Defined in EIP 619."
      },
      "setABI(bytes32,uint256,bytes)": {
        "notice": "Sets the ABI associated with an MID node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string."
      },
      "setAddr(bytes32,address)": {
        "notice": "Sets the address associated with an MID node. May only be called by the owner of that node in the MID registry."
      },
      "setContenthash(bytes32,bytes)": {
        "notice": "Sets the contenthash associated with an MID node. May only be called by the owner of that node in the MID registry."
      },
      "setInterface(bytes32,bytes4,address)": {
        "notice": "Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support."
      },
      "setName(bytes32,string)": {
        "notice": "Sets the name associated with an MID node, for reverse records. May only be called by the owner of that node in the MID registry."
      },
      "setPubkey(bytes32,bytes32,bytes32)": {
        "notice": "Sets the SECP256k1 public key associated with an MID node."
      },
      "setText(bytes32,string,string)": {
        "notice": "Sets the text data associated with an MID node and key. May only be called by the owner of that node in the MID registry."
      },
      "text(bytes32,string)": {
        "notice": "Returns the text data associated with an MID node and key."
      }
    },
    "notice": "A simple resolver anyone can use; only allows the owner of a node to set its address.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8252,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "abis",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"
      },
      {
        "astId": 8406,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "_addresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"
      },
      {
        "astId": 8553,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "hashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 8641,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "interfaces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))"
      },
      {
        "astId": 8824,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "names",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 8905,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "pubkeys",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(PublicKey)8900_storage)"
      },
      {
        "astId": 8996,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "texts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))"
      },
      {
        "astId": 7654,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "mid",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(MID)6720"
      },
      {
        "astId": 7657,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "nameWrapper",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(INameWrapper)7636"
      },
      {
        "astId": 7668,
        "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(INameWrapper)7636": {
        "encoding": "inplace",
        "label": "contract INameWrapper",
        "numberOfBytes": "20"
      },
      "t_contract(MID)6720": {
        "encoding": "inplace",
        "label": "contract MID",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes4 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_address)"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes_storage)"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(PublicKey)8900_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PubkeyResolver.PublicKey)",
        "numberOfBytes": "32",
        "value": "t_struct(PublicKey)8900_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PublicKey)8900_storage": {
        "encoding": "inplace",
        "label": "struct PubkeyResolver.PublicKey",
        "members": [
          {
            "astId": 8897,
            "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8899,
            "contract": "contracts/resolvers/PublicResolver.sol:PublicResolver",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}